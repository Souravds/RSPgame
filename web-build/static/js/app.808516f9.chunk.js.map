{"version":3,"sources":["src/PlayScreen.js","App.js","web-build/register-service-worker.js"],"names":["PlayScreen","count","style","View","Text","fontSize","App","useState","setcount","play","setplay","useEffect","timer","setTimeout","clearTimeout","randomNmbr","Math","floor","random","styles","container","StyleSheet","compose","backgroundColor","width","marginBottom","Button","button","title","onPress","header","StatusBar","create","flex","alignItems","justifyContent","marginTop","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console"],"mappings":"kMAWeA,EARI,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAC3B,OACE,kBAACC,EAAA,EAAD,CAAMD,MAAOA,GACX,kBAACE,EAAA,EAAD,CAAMF,MAAO,CAAEG,SAAU,KAAOJ,KCDvB,SAASK,IAAO,IAAD,EACFC,mBAAS,GADP,WACrBN,EADqB,KACdO,EADc,OAEJD,oBAAS,GAFL,WAErBE,EAFqB,KAEfC,EAFe,KAI5BC,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACT,IAAVZ,GACJO,EAASP,EAAQ,KAChB,KACH,OAAO,WACLa,aAAaF,MAEd,CAACX,IAEJ,IAGMc,EAAa,WAEjB,OADaC,KAAKC,MAAsB,EAAhBD,KAAKE,WAQ/B,OACE,kBAACf,EAAA,EAAD,CAAMD,MAAOiB,EAAOC,WACjBX,EACCR,EAAQ,EACN,kBAAC,EAAD,CACEA,MAAOA,EACPC,MAAOmB,IAAWC,QAAQH,EAAOC,UAAW,CAC1CG,gBAlBI,CAAC,UAAW,UAAW,WAkBFR,KACzBS,MAAO,YAIX,oCACE,kBAACpB,EAAA,EAAD,CAAMF,MAAO,CAAEG,SAAU,QAASoB,aAAc,SAzB5C,CAAC,SAAK,eAAM,gBA0BPV,MAET,kBAACW,EAAA,EAAD,CACExB,MAAOiB,EAAOQ,OACdC,MAAM,aACNC,QAAS,kBAAMrB,EAAS,MAE1B,6BACA,kBAACkB,EAAA,EAAD,CAAQE,MAAM,MAAMC,QAAS,kBAAMnB,GAAQ,OAI/C,oCACE,kBAACN,EAAA,EAAD,CAAMF,MAAOiB,EAAOW,QAApB,uBACA,kBAAC1B,EAAA,EAAD,CAAMF,MAAO,CAAEG,SAAU,OAAQoB,aAAc,SAA/C,kCACA,kBAACC,EAAA,EAAD,CAAQE,MAAM,OAAOC,QAAS,kBAhCpCnB,GAAQ,QACRF,EAAS,OAkCP,kBAACuB,EAAA,UAAD,CAAW7B,MAAM,UAKvB,IAAMiB,EAASE,IAAWW,OAAO,CAC/BZ,UAAW,CACTa,KAAM,EACNV,gBAAiB,OACjBW,WAAY,SACZC,eAAgB,UAElBL,OAAQ,CACNzB,SAAU,IAEZsB,OAAQ,CACNH,MAAO,IACPY,UAAW,O,4DC9EX,kBAAmBC,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,0BAA2B,CAAEC,MAAO,MAC7CC,MAAK,SAAUC,OAGfC,OAAM,SAAUC,GACfC,QAAQH,KAAK,oCAAqCE,W","file":"static/js/app.808516f9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { View, Text } from \"react-native\";\r\n\r\nconst PlayScreen = ({ count, style }) => {\r\n  return (\r\n    <View style={style}>\r\n      <Text style={{ fontSize: 60 }}>{count}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default PlayScreen;\r\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useState, useEffect } from \"react\";\nimport { StyleSheet, Text, View, Button } from \"react-native\";\nimport PlayScreen from \"./src/PlayScreen\";\n\nexport default function App() {\n  const [count, setcount] = useState(3);\n  const [play, setplay] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (count === 0) return;\n      setcount(count - 1);\n    }, 500);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [count]);\n\n  const signs = [\"‚úä\", \"üñê\", \"ü§û\"];\n  const bgColor = [\"#f6e58d\", \"#eb4d4b\", \"#e056fd\"];\n\n  const randomNmbr = () => {\n    const rndm = Math.floor(Math.random() * 3);\n    return rndm;\n  };\n\n  const firstplay = () => {\n    setplay(true);\n    setcount(3);\n  };\n  return (\n    <View style={styles.container}>\n      {play ? (\n        count > 0 ? (\n          <PlayScreen\n            count={count}\n            style={StyleSheet.compose(styles.container, {\n              backgroundColor: bgColor[randomNmbr()],\n              width: \"100vw\",\n            })}\n          />\n        ) : (\n          <>\n            <Text style={{ fontSize: \"200px\", marginBottom: \"50px\" }}>\n              {signs[randomNmbr()]}\n            </Text>\n            <Button\n              style={styles.button}\n              title=\"Play again\"\n              onPress={() => setcount(3)}\n            />\n            <br />\n            <Button title=\"End\" onPress={() => setplay(false)} />\n          </>\n        )\n      ) : (\n        <>\n          <Text style={styles.header}>Rock Paper Scissors</Text>\n          <Text style={{ fontSize: \"50px\", marginBottom: \"40px\" }}>‚úäüñêü§û</Text>\n          <Button title=\"Play\" onPress={() => firstplay()} />\n        </>\n      )}\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  header: {\n    fontSize: 30,\n  },\n  button: {\n    width: 300,\n    marginTop: 50,\n  },\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}